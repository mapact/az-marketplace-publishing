name: 'marketplace-vm-image-creation'

pool:
  vmImage: 'windows-latest'

variables:
  - group: 'Azure Resources'
  - name: solution
    value: 'VM Offer Pipeline/application/AspNetCoreWebApp/*.sln'
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'

stages:
- stage: BuildAndTest
  jobs:
  - job: AspDotNet
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true 
          /p:WebPublishMethod=Package 
          /p:PackageAsSingleFile=true 
          /p:SkipInvalidConfigurations=true 
          /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\AspNetCoreWebApp.zip" 
          /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployTerraformFoundation
  jobs:
  - job:
    steps:
    - task: DownloadSecureFile@1
      displayName: Download Foundation tfvars file from Secure Library
      name: tfvars
      inputs:
        secureFile: 'foundation-terraform.tfvars'
    
    - task: CopyFiles@2
      displayName: Move Foundation tfvars file to working Terraform directory
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: 'foundation-terraform.tfvars'
        TargetFolder: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/foundation'
    
    - task: rename@0
      displayName: Rename foundation-terraform.tfvars to terraform.tfvars
      inputs:
        Command: 'rename'
        SourceFile: 'terraform/foundation/foundation-terraform.tfvars'
        NewName: 'terraform.tfvars'
    
    - task: TerraformInstaller@0
      displayName: Install necessary Terraform version
      inputs:
        terraformVersion: '0.12.24'
    
    - task: TerraformTaskV1@0
      displayName: terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/foundation'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(azureTerraformResourceGroup)'
        backendAzureRmStorageAccountName: '$(azureTerraformStorageAccount)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'foundation.tfstate'
    
    - task: TerraformTaskV1@0
      displayName: terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/foundation'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
    
    - task: TerraformTaskV1@0
      displayName: terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/foundation'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'

- stage: DeployTerraformApplication
  jobs:
  - job: CreateAppResourcesWithTerraform
    steps:
    - task: DownloadSecureFile@1
      displayName: Download Application tfvars file from Secure Library
      name: tfvars
      inputs:
        secureFile: 'application-terraform.tfvars'
    
    - task: CopyFiles@2
      displayName: Move Application tfvars file to working Terraform directory
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: 'application-terraform.tfvars'
        TargetFolder: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/application'
    
    - task: rename@0
      displayName: Rename application-terraform.tfvars to terraform.tfvars
      inputs:
        Command: 'rename'
        SourceFile: 'terraform/application/application-terraform.tfvars'
        NewName: 'terraform.tfvars'
    
    - task: TerraformInstaller@0
      displayName: Install necessary Terraform version
      inputs:
        terraformVersion: '0.12.24'
    
    - task: TerraformTaskV1@0
      displayName: terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/application'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(azureTerraformResourceGroup)'
        backendAzureRmStorageAccountName: '$(azureTerraformStorageAccount)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'application.tfstate'
    
    - task: TerraformTaskV1@0
      displayName: terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/application'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
    
    - task: TerraformTaskV1@0
      name: terraformAppApply
      displayName: terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/application'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        
    - task: PowerShell@2
      name: terraformAppOutput
      displayName: Capture Terraform outputs as pipeline variables
      inputs:
        targetType: 'inline'
        script: |
          Get-Content -Path "$(terraformAppApply.jsonOutputVariablesPath)"
          $terraformOutput = Get-Content "$(terraformAppApply.jsonOutputVariablesPath)" | ConvertFrom-Json
          $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }

  - job: DeployApplicationToVm
    dependsOn: CreateAppResourcesWithTerraform
    variables:
      windowsVmName: $[ dependencies.CreateAppResourcesWithTerraform.outputs['terraformAppOutput.win_vm_name'] ]
      windowsVmPip: $[ dependencies.CreateAppResourcesWithTerraform.outputs['terraformAppOutput.win_vm_pip'] ]
      appResourceGroup: $[ dependencies.CreateAppResourcesWithTerraform.outputs['terraformAppOutput.resource_group_name'] ]
    steps:

    - task: DownloadBuildArtifacts@0
      displayName: Download Build Artifacts
      inputs:
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    
    - task: PowerShell@2
      displayName: Transfer build artifacts to target server using remote PowerShell  
      inputs:
        targetType: 'inline'
        script: |
          Get-ChildItem $(System.ArtifactsDirectory)/drop
          $user = "$(windowsVmUsername)"
          $password = ConvertTo-SecureString -String "$(windowsVmPassword)" -AsPlainText -Force
          $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $user, $password
          $session = New-PSSession –ComputerName $(windowsVmPip) -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck -IdleTimeout 7200000 -OperationTimeout 0 -OutputBufferingMode Block) -Credential $credential
          Copy-Item –Path $(System.ArtifactsDirectory)/drop –Destination 'C:/' -Recurse –ToSession $session -Force
          $session | Remove-PSSession
    
    - task: PowerShellOnTargetMachines@3
      displayName: Deploy updated Web App scripts and Generalize VM
      inputs:
        Machines: '$(windowsVmPip):5986'
        UserName: '$(windowsVmUsername)'
        UserPassword: '$(windowsVmPassword)'
        InlineScript: |
          Stop-WebAppPool -Name 'DefaultAppPool'
          C:/drop/AspNetCoreWebApp.deploy.cmd /Y
          Start-WebAppPool -Name 'DefaultAppPool'
          Start-Process -FilePath C:/Windows/System32/Sysprep/Sysprep.exe -ArgumentList '/generalize /oobe /quit /quiet'  -Wait 
        NewPsSessionOptionArguments: '-SkipCACheck -SkipCNCheck -SkipRevocationCheck -IdleTimeout 7200000 -OperationTimeout 0 -OutputBufferingMode Block'

- stage: ExportApplicationImage
  dependsOn: DeployTerraformApplication
  jobs:
  - job: ExportAppVm
    variables:
      windowsVmName: $[ stageDependencies.DeployTerraformApplication.CreateAppResourcesWithTerraform.outputs['terraformAppOutput.win_vm_name'] ]
      appResourceGroup: $[ stageDependencies.DeployTerraformApplication.CreateAppResourcesWithTerraform.outputs['terraformAppOutput.resource_group_name'] ]
    steps:

    - task: AzurePowerShell@5
      displayName: Create Azure Managed Image from the Generalized VM
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        azurePowerShellVersion: 'LatestVersion'
        scriptType: 'InlineScript'
        inline: |
          $vmName = "$(windowsVmName)"
          $rgName = "$(appResourceGroup)"
          $location = "SoutheastAsia"
          $imageName = "$(windowsVmName)-image-$(Build.BuildId)"
          $vm = Get-AzVm -Name $vmName -ResourceGroupName $rgName
          $diskID = $vm.StorageProfile.OsDisk.ManagedDisk.Id
          $imageConfig = New-AzImageConfig -Location $location
          $imageConfig = Set-AzImageOsDisk -Image $imageConfig -OsState Generalized -OsType Windows -ManagedDiskId $diskID
          New-AzImage -ImageName $imageName -ResourceGroupName "$(azureManagedImageResourceGroup)" -Image $imageConfig

    - task: AzureCLI@2
      displayName: Export Managed Image to Shared Image Gallery and Blob Storage VHD
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $nextImageVersionNumber = "1.0." + "$(Build.BuildId)"
          $azManagedImageResourceGroup = "$(azureManagedImageResourceGroup)"
          $azManagedImageName = "$(azureManagedImagePrefix)" + "$(Build.BuildId)"
          $azSharedImageGalleryResourceGroup = "$(azureSharedImageGalleryResourceGroup)"
          $azSharedImageGalleryName = "$(azureSharedImageGalleryName)"
          $azSharedImageDefinitionName = "$(azureSharedImageDefinitionName)"
          $azSharedImageTargetRegions = "$(azureSharedImageTargetRegions)"
          $azVhdDiskResourceGroup = "$(azureVhdDiskResourceGroup)"
          $azVhdDiskLocation = "$(azureVhdDiskLocation)"
          $azVhdDiskName = "$(azureVhdDiskPrefix)" + $nextImageVersionNumber
          $azVhdStorageAccount = "$(azureVhdStorageAccount)"
          $azVhdStorageContainer = "$(azureVhdStorageContainer)"
          
          # Obtain a reference to the resource ID of the newly created Azure Managed Image
          $azImageId = az image show `
          	-g $azManagedImageResourceGroup `
          	-n $azManagedImageName `
          	--query "id"
          
          # Add a new Image Version to the Shared Image Gallery, using the Azure Managed Image ID as reference
          az sig image-version create `
          	-g $azSharedImageGalleryResourceGroup `
          	--gallery-name $azSharedImageGalleryName `
          	--gallery-image-definition $azSharedImageDefinitionName `
          	--gallery-image-version $nextImageVersionNumber `
          	--target-regions $azSharedImageTargetRegions `
          	--managed-image $azImageId
          
          # Obtain a reference to the resource ID of the newly created Image Version
          $azSharedImageVersion = az sig image-version show `
          	-g $azSharedImageGalleryResourceGroup `
          	--gallery-name $azSharedImageGalleryName `
          	--gallery-image-definition $azSharedImageDefinitionName `
          	--gallery-image-version $nextImageVersionNumber `
          	--query "id"
          
          # Create an Azure Managed Disk using the new Image Version
          az disk create `
          	-g $azVhdDiskResourceGroup `
          	-l $azVhdDiskLocation `
          	-n $azVhdDiskName `
          	--gallery-image-reference $azSharedImageVersion
          
          # Generate a SAS URL for the Managed Disk with 10 hour Read access lease
          $azDiskSasUrl = az disk grant-access `
          	-g $azVhdDiskResourceGroup `
          	-n $azVhdDiskName `
          	--duration-in-seconds 36000 `
          	--access-level Read `
          	--query "accessSas"
          
          # Generate a SAS URL for the VHD's destination container with an expiry time of 10 hours
          $expiryTime = (Get-Date) + (New-TimeSpan -Hours 10)
          $expiryTimeString = $expiryTime.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'")
          $azStorageSasUrl = az storage container generate-sas `
          	--account-name $azVhdStorageAccount `
          	-n $azVhdStorageContainer `
          	--permissions acw `
          	--expiry $expiryTimeString
          $azStorageSasUrl = $azStorageSasUrl -replace '"', ''
          
          # Perform an AzCopy from the Managed Disk to the Azure Storage Container
          $azVhdStorageUrl = "https://" + $azVhdStorageAccount + ".blob.core.windows.net/" + $azVhdStorageContainer + "/" + $azVhdDiskName + ".vhd?" + $azStorageSasUrl
          azcopy copy `
          	$azDiskSasUrl `
          	$azVhdStorageUrl
          
          # Clean up resources, destroy the Managed Image and Disk
          az image delete `
          	-g $azManagedImageResourceGroup `
          	-n $azManagedImageName
          
          az disk revoke-access `
          	-g $azVhdDiskResourceGroup `
          	-n $azVhdDiskName
          
          az disk delete `
          	-g $azVhdDiskResourceGroup `
          	-n $azVhdDiskName `
          	--yes

- stage: DestroyTerraformApplication
  jobs:
  - job: CreateAppResourcesWithTerraform
    steps:
    - task: DownloadSecureFile@1
      displayName: Download Application tfvars file from Secure Library
      name: tfvars
      inputs:
        secureFile: 'application-terraform.tfvars'
    
    - task: CopyFiles@2
      displayName: Move Application tfvars file to working Terraform directory
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: 'application-terraform.tfvars'
        TargetFolder: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/application'
    
    - task: rename@0
      displayName: Rename application-terraform.tfvars to terraform.tfvars
      inputs:
        Command: 'rename'
        SourceFile: 'terraform/application/application-terraform.tfvars'
        NewName: 'terraform.tfvars'
    
    - task: TerraformInstaller@0
      displayName: Install necessary Terraform version
      inputs:
        terraformVersion: '0.12.24'
    
    - task: TerraformTaskV1@0
      displayName: terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/application'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(azureTerraformResourceGroup)'
        backendAzureRmStorageAccountName: '$(azureTerraformStorageAccount)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'application.tfstate'

    - task: TerraformTaskV1@0
      displayName: terraform destroy
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM Offer Pipeline/terraform/application'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'